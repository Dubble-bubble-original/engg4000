name: CI/CD Pipeline
on:
  push:
    branches:  
    - dev
    - docker-overhaul
    
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  LintingAndUnitTests:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    strategy:
      # Continue even if a case fails
      fail-fast: false
      # This job will run for each of these cases (each combination of values for the variables `directory` & `command`)
      matrix:
        directory: [application, Service]
        command: [lint, test]

    defaults:
      # Set working directory where commands are run
      run:
        working-directory: ${{ matrix.directory }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout the repository
        uses: actions/checkout@v2

      # Setup Node
      - name: Setup Node.js v14
        uses: actions/setup-node@v2
        with:
          node-version: '14.x'
          # Cache the dependencies based on package-lock.json
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      # Run single commands using the runner's shell
      - name: Install dependencies
        run: npm install --no-optional -f
      - name: Run ${{ matrix.command }} command in ${{ matrix.directory }} directory
        run: npm run ${{ matrix.command }}

  APITests:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout the repository
        uses: actions/checkout@v2
      
      # Setup Node
      - name: Setup Node.js v14
        uses: actions/setup-node@v2
        with:
          node-version: '14.x'
          # Cache the dependencies based on package-lock.json
          cache: 'npm'
          cache-dependency-path: Service/package-lock.json

      # Setup JDK
      - name: Set up JDK 8
        uses: actions/setup-java@v2
        with:
          java-version: '8'
          distribution: 'adopt'

      # Start service
      - name: Start Service
        run: |
          cd Service
          npm install --no-optional --force
          npm run dev &

      # Run Karate API Tests
      - name: Run Karate API Tests
        run: |
          cd Automation
          mvn test -Dtest=ServiceTests -Dkarate.env="dev"
  
  Deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Latest Repo
        uses: actions/checkout@v2
        
      - name: Log in to Docker Hub
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}  
      - name: Build Images
        run: |
          docker build --build-arg API_KEY=${{ secrets.API_KEY }} --build-arg SERVICE_URL=${{ secrets.SERVICE_URL }} -t ${{ secrets.DOCKER_USERNAME }}/engg4000-client ./application
          docker build -t ${{ secrets.DOCKER_USERNAME }}/engg4000-api ./Service
          docker build -t ${{ secrets.DOCKER_USERNAME }}/engg4000-nginx ./nginx
      
      - name: List images
        run: docker images

      - name: Push Images to Docker Hub
        run: | 
          docker push ${{ secrets.DOCKER_USERNAME }}/engg4000-client
          docker push ${{ secrets.DOCKER_USERNAME }}/engg4000-api
          docker push ${{ secrets.DOCKER_USERNAME }}/engg4000-nginx

      - name: Get Timestamp
        uses: gerred/actions/current-time@master
        id: current-time

      - name: Run String Replace
        uses: frabert/replace-string-action@master
        id: format-time
        with:
          pattern: '[:\.]+'
          string: "${{ steps.current-time.outputs.time }}"
          replace-with: '-'
          flags: 'g'

      - name: Generate Deployment Package
        run: zip -r deploy.zip * -x "**node_modules**"

      - name: Deploy to EB
        uses: einaregilsson/beanstalk-deploy@v16
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: Nota
          environment_name: Nota-env
          version_label: "Nota-${{ steps.format-time.outputs.replaced }}"
          region: us-east-1
          deployment_package: deploy.zip
      
      - name: Slack Notification
        uses: someimportantcompany/github-actions-slack-message@v1
        with:
          webhook-url: ${{ secrets.SLACK_WEBHOOK }}
          text: 'Successfully Deployed prod-app-${{ steps.format-time.outputs.replaced }}'
          image-url: https://senior-design-img-bucket.s3.amazonaws.com/elmo.gif
          color: good